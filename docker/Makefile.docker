export DOCKER_BUILDKIT=1

export AR_REQS_REPO ?= ${AR_REPO_PREFIX}/umbrella-reqs
export CI_REQS_REPO ?= codecov/umbrella-reqs

# `LC_ALL=C` is added to `sort` to ensure you get the same order across systems.
# Otherwise, a Mac may sort according to en_US.UTF-8 while CI may sort according to C/POSIX.
SHARED_SHA := $(shell git ls-files libs/shared | LC_ALL=C sort | xargs sha1sum | cut -d ' ' -f 1 | sha1sum | head -c 40)
DOCKER_REQS_SHA := $(shell sha1sum docker/Dockerfile.requirements | head -c 40)
UV_LOCK_SHA := $(shell sha1sum ./uv.lock | head -c 40)
export REQUIREMENTS_TAG := $(shell echo "reqs-${UV_LOCK_SHA}-${DOCKER_REQS_SHA}-${SHARED_SHA}" | ${REQUIREMENTS_TAG_HASH_CMD:-cat})

######
# Generic targets for building images.
#
# If a target starts with `_`, you will probably call it through a wrapper
# target like `worker.build` or `api.build`. If a target does not start with `_`
# then it should not be wrapped.
#
# Assumes a number of Makefile variables have been populated:
# - APP_DIR: the directory within umbrella that images should be "rooted" at.
#   The requirements image is the same under the hood but each image still
#   builds with a superficially different `docker/Dockerfile` inside of
#   `APP_DIR`. Container images are also saved to/loaded from `APP_DIR`.
# - AR_REPO: the container repository that images should be loaded from or
#   published to.
# - DOCKERHUB_REPO: the repository on Docker Hub that images will be published
#   to. Generally only for self-hosted images.
# - Various version/SHA variables.
######

# Build a requirements image.
build.requirements:
	docker pull ${AR_REQS_REPO}:${REQUIREMENTS_TAG} || docker build \
			   --network host \
               -f docker/Dockerfile.requirements . \
               -t ${AR_REQS_REPO}:${REQUIREMENTS_TAG} \
	       -t ${CI_REQS_REPO}:${REQUIREMENTS_TAG}

# Build an image for local development.
_build.local:
	cd ${APP_DIR} && \
	docker build -f docker/Dockerfile . \
		-t ${AR_REPO}:latest \
		-t ${AR_REPO}:${VERSION} \
		--build-arg REQUIREMENTS_IMAGE=${AR_REQS_REPO}:${REQUIREMENTS_TAG} \
		--build-arg BUILD_ENV=local

# Build an image (+ its reqs base) for local development.
_build:
	$(MAKE) build.requirements
	$(MAKE) _build.local

# Build a production image.
_build.app:
	cd ${APP_DIR} && \
	docker build -f docker/Dockerfile . \
		-t ${AR_REPO}:latest \
		-t ${AR_REPO}:${VERSION} \
		--label "org.label-schema.vendor"="Codecov" \
		--label "org.label-schema.version"="${release_version}-${sha}" \
		--label "org.opencontainers.image.revision"="$(full_sha)" \
		--label "org.opencontainers.image.source"="github.com/codecov/umbrella" \
		--build-arg REQUIREMENTS_IMAGE=${AR_REQS_REPO}:${REQUIREMENTS_TAG} \
		--build-arg RELEASE_VERSION=${VERSION} \
		--build-arg BUILD_ENV=cloud

# Build a self-hosted image.
_build.self-hosted:
	$(MAKE) _build.self-hosted-base
	$(MAKE) _build.self-hosted-runtime

_build.self-hosted-base:
	cd ${APP_DIR} && \
	docker build -f docker/Dockerfile . \
		-t ${DOCKERHUB_REPO}:latest-no-dependencies \
		-t ${DOCKERHUB_REPO}:${VERSION}-no-dependencies \
		--build-arg REQUIREMENTS_IMAGE=${AR_REQS_REPO}:${REQUIREMENTS_TAG} \
		--build-arg RELEASE_VERSION=${VERSION} \
		--build-arg BUILD_ENV=self-hosted

_build.self-hosted-runtime:
	cd ${APP_DIR} && \
	docker build -f docker/Dockerfile . \
		-t ${DOCKERHUB_REPO}:latest \
		-t ${DOCKERHUB_REPO}:${VERSION} \
		--label "org.label-schema.vendor"="Codecov" \
		--label "org.label-schema.version"="${release_version}-${sha}" \
		--build-arg REQUIREMENTS_IMAGE=${AR_REQS_REPO}:${REQUIREMENTS_TAG} \
        --build-arg RELEASE_VERSION=${VERSION} \
        --build-arg BUILD_ENV=self-hosted-runtime

_tag.latest:
	docker tag ${AR_REPO}:${VERSION} ${AR_REPO}:latest

_tag.staging:
	docker tag ${AR_REPO}:${VERSION} ${AR_REPO}:staging-${VERSION}

_tag.production:
	docker tag ${AR_REPO}:${VERSION} ${AR_REPO}:production-${VERSION}

_tag.self-hosted-rolling:
	docker tag ${DOCKERHUB_REPO}:${VERSION}-no-dependencies ${DOCKERHUB_REPO}:rolling_no_dependencies
	docker tag ${DOCKERHUB_REPO}:${VERSION} ${DOCKERHUB_REPO}:rolling

_tag.self-hosted-release:
	docker tag ${DOCKERHUB_REPO}:${VERSION}-no-dependencies ${DOCKERHUB_REPO}:${release_version}_no_dependencies
	docker tag ${DOCKERHUB_REPO}:${VERSION}-no-dependencies ${DOCKERHUB_REPO}:latest_calver_no_dependencies
	docker tag ${DOCKERHUB_REPO}:${VERSION}-no-dependencies ${DOCKERHUB_REPO}:latest_stable_no_dependencies
	docker tag ${DOCKERHUB_REPO}:${VERSION} ${DOCKERHUB_REPO}:${release_version}
	docker tag ${DOCKERHUB_REPO}:${VERSION} ${DOCKERHUB_REPO}:latest-stable
	docker tag ${DOCKERHUB_REPO}:${VERSION} ${DOCKERHUB_REPO}:latest-calver

# Load an exported requirements image (e.g. from GHA's cache)
load.requirements:
	docker load --input requirements.tar
	docker tag ${CI_REQS_REPO}:${REQUIREMENTS_TAG} ${AR_REQS_REPO}:${REQUIREMENTS_TAG}

# Load an exported self-hosted image (e.g. from GHA's cache)
_load.self-hosted:
	docker load --input ${APP_DIR}/self-hosted-runtime.tar
	docker load --input ${APP_DIR}/self-hosted.tar

# Export a production image.
_save.app:
	docker save -o ${APP_DIR}/app.tar ${AR_REPO}:${VERSION}

# Export a requirements image.
save.requirements:
	docker tag ${AR_REQS_REPO}:${REQUIREMENTS_TAG} ${CI_REQS_REPO}:${REQUIREMENTS_TAG}
	docker save -o requirements.tar ${CI_REQS_REPO}:${REQUIREMENTS_TAG}

# Export a self-hosted image pair (base and runtime)
_save.self-hosted:
	$(MAKE) _save.self-hosted-base
	$(MAKE) _save.self-hosted-runtime

_save.self-hosted-base:
	docker save -o ${APP_DIR}/self-hosted.tar ${DOCKERHUB_REPO}:${VERSION}-no-dependencies

_save.self-hosted-runtime:
	docker save -o ${APP_DIR}/self-hosted-runtime.tar ${DOCKERHUB_REPO}:${VERSION}

_push.latest:
	docker push ${AR_REPO}:latest

_push.staging:
	docker push ${AR_REPO}:staging-${VERSION}

_push.production:
	docker push ${AR_REPO}:production-${VERSION}

push.requirements:
	docker push ${AR_REQS_REPO}:${REQUIREMENTS_TAG}

_push.self-hosted-release:
	docker push ${DOCKERHUB_REPO}:${release_version}_no_dependencies
	docker push ${DOCKERHUB_REPO}:latest_calver_no_dependencies
	docker push ${DOCKERHUB_REPO}:latest_stable_no_dependencies
	docker push ${DOCKERHUB_REPO}:${release_version}
	docker push ${DOCKERHUB_REPO}:latest-stable
	docker push ${DOCKERHUB_REPO}:latest-calver

_push.self-hosted-rolling:
	docker push ${DOCKERHUB_REPO}:rolling_no_dependencies
	docker push ${DOCKERHUB_REPO}:rolling
